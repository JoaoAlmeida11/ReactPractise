@startuml
actor User
boundary UI

' Firebase
database Firebase
database Email
entity FirebaseUserInfo

' APIs
database API_PLAYERS
database API_LIGAS_CLUBES_ESTADIOS

' componnets
control App
control Nav
control Liga
control RequestLiga
control Club
control RequestClub
control ClubPage
control Estadio
control RequestEstadio
control PlayerList
control RequestPlayerList
control RequestPlayerListClub
control RequestPlayerListPlayers
control PlayerItem
control ClubInfo
control RequestClubInfo
control Player
control RequestPlayer

' sign up
control SignUp
' login
control Login
' log out
control LogOut

' react + auth
control React
database ReactLocalStorage
entity AuthToken

' store
database Store
control Receive
entity UserInfo

' 11 ideal
control RequestPlayers
control PlayerIdeal

' Auth Token
control CheckAuthToken

' Nav
App -> Nav: request Nav component
Nav -> App: response Nav component
' Liga (pagina inicial)
App -> Liga: request Liga component
Liga -> RequestLiga: resquest Liga prop
RequestLiga -> API_LIGAS_CLUBES_ESTADIOS: resquest Liga data
API_LIGAS_CLUBES_ESTADIOS -> RequestLiga: response Liga data
RequestLiga -> Liga: response Liga prop
Liga -> App: response Liga component
' Club (route -> clicar numa Liga)
App -> Club: request Club component
Club -> RequestClub: resquest Club prop
RequestClub -> API_LIGAS_CLUBES_ESTADIOS: resquest Club data
API_LIGAS_CLUBES_ESTADIOS -> RequestClub: response Club data
RequestClub -> Club: response Club prop
Club -> App: response Club component
' ClubPage (route -> clicar numa clube)
App -> ClubPage: request Club component
ClubPage -> Estadio: request Estadio component
Estadio -> RequestEstadio: resquest Estadio prop
RequestEstadio -> API_LIGAS_CLUBES_ESTADIOS: resquest Estadio data
API_LIGAS_CLUBES_ESTADIOS -> RequestEstadio: response Estadio data
RequestEstadio -> Estadio: response Estadio prop
Estadio -> ClubPage: response Estadio component
ClubPage -> PlayerList: request PlayerList component and send Club prop
PlayerList -> RequestPlayerListClub: resquest PlayerList prop
RequestPlayerList -> API_LIGAS_CLUBES_ESTADIOS: resquest PlayerList data ask liga
API_LIGAS_CLUBES_ESTADIOS -> RequestPlayerList: response PlayerList data
' club e sabemos a sua liga
' pesquisa na outra API de todos os jogadores desse clube a jogar nessa Liga url=?club=${club}&liga=${liga} include apenas jogadores
RequestPlayerListPlayers -> API_PLAYERS: request Players based on str: club and str: liga
API_PLAYERS -> RequestPlayerListPlayers: response Players
RequestPlayerListPlayers -> PlayerList: response Players
RequestPlayerList -> PlayerList: response PlayerList prop
PlayerList -> PlayerItem: send PlayerItem prop
PlayerItem -> PlayerList: response PlayerItem component
PlayerList -> ClubPage: response PlayerList component
ClubPage -> ClubInfo: request ClubInfo component
ClubInfo -> RequestClubInfo: resquest ClubInfo prop
RequestClubInfo -> API_LIGAS_CLUBES_ESTADIOS: resquest ClubInfo data
API_LIGAS_CLUBES_ESTADIOS -> RequestClubInfo: response ClubInfo data
RequestClubInfo -> Estadio: response ClubInfo prop
ClubInfo -> ClubPage: response ClubInfo component
' Player (route -> clicar numa jogador de um clube)
App -> Player: request Player component
Player -> RequestPlayer: request Player
RequestPlayer -> API_PLAYERS: request Player data
API_PLAYERS -> RequestPlayer: response Player
RequestPlayer -> Player: response Player
Player -> App: response Player component

' Firebase relationship
' sign up
User -> UI: sign up
UI -> App: resquest sign up
App -> SignUp: resquest sign up
SignUp -> Firebase: add new user
Firebase -> FirebaseUserInfo: set FirebaseUserInfo

' check account
Firebase -> Email: confirm new account
Email -> Firebase: confirmation request
Firebase -> FirebaseUserInfo: validation

' login
User -> UI: login request
UI -> App: login request
App -> Login: login request
Login -> Firebase: Authentication request
Firebase -> FirebaseUserInfo: check if it matches and its validated
FirebaseUserInfo -> Firebase: validation T/F
Firebase -> UI: Authentication response
' if T
UI -> App: request create Auth TOKEN
App -> ReactLocalStorage: create Auth TOKEN
UI -> App: send state payload user
App -> Receive: send user payload state
Receive -> Store: dispatch UserInfo
Store -> UserInfo: set UserInfo
' apos iniciar conta mostra que foi com sucesso
UI -> User: show Authentication response

' logout
User -> UI: request logout
UI -> App: request delete Auth TOKEN
App -> LogOut: request delete Auth TOKEN
LogOut -> ReactLocalStorage: delete Auth TOKEN

' cheack if Auth TOKEN exists when entering web app
CheckAuthToken -> ReactLocalStorage: check if Auth TOKEN exists
ReactLocalStorage -> CheckAuthToken: validation T/F

'11 ideal (button only visible while logged)
User -> UI: click button 11 ideal
UI -> App: request 11 ideal
App -> RequestPlayers: request players data
' the request is based on rating or performance from many leagues (German, Portugal, Spain, Italy)
RequestPlayers -> API_PLAYERS: request players data
API_PLAYERS -> RequestPlayers: response players
RequestPlayers -> PlayerIdeal: send player prop
PlayerIdeal -> App: JSX player information
App -> UI: 11 Player info HTML & CSS
UI -> User: view 11 ideal

' redux relationship
App -> Receive: action
Receive -> Store: dispatch
Store -> UserInfo: check changes
UserInfo -> Store: return changes 
Store -> UI: send state changes

@enduml